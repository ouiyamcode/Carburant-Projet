package org.isen.projet.carburant.data.impl

import com.github.kittinunf.fuel.httpDownload
import com.github.kittinunf.result.Result
import org.apache.logging.log4j.LogManager
import org.apache.logging.log4j.Logger
import org.isen.projet.carburant.data.IDataSource
import org.isen.projet.carburant.model.Station
import java.io.File
import java.io.StringReader
import java.text.Normalizer
import java.util.zip.ZipFile
import javax.xml.parsers.DocumentBuilderFactory
import org.xml.sax.InputSource
import java.nio.charset.StandardCharsets

class SourceXml : IDataSource {

    private val zipUrl = "https://donnees.roulez-eco.fr/opendata/instantane"
    private val dataDirectory = "data"
    private val zipFilePath = "$dataDirectory/prix-carburants.zip"
    private val extractedXmlPath = "$dataDirectory/PrixCarburants_instantane.xml"
    private val logger: Logger = LogManager.getLogger(SourceXml::class.java)

    override fun fetchData(): String {
        val dataDir = File(dataDirectory)
        if (!dataDir.exists()) dataDir.mkdirs()

        if (!downloadFile(zipUrl, zipFilePath)) {
            logger.error("‚ùå Erreur : Impossible de t√©l√©charger le fichier ZIP.")
            return ""
        }

        if (!extractZipFile(zipFilePath, extractedXmlPath)) {
            logger.error("‚ùå Erreur : Impossible d'extraire le fichier XML.")
            return ""
        }

        val xmlFile = File(extractedXmlPath)
        return if (xmlFile.exists() && xmlFile.length() > 0) {
            xmlFile.readText(Charsets.UTF_8) // Force la lecture en UTF-8
        } else {
            logger.error("‚ùå Erreur : Le fichier XML extrait est vide.")
            ""
        }
    }

    override fun fetchDataForCity(
        city: String,
        fuelType: String?,
        hasToilets: Boolean,
        hasAirPump: Boolean,
        hasFoodShop: Boolean
    ): List<Station> {
        val rawData = fetchData()
        return if (rawData.isNotEmpty()) {
            parseData(rawData).filter { station ->
                normalizeText(station.ville) == normalizeText(city) &&
                        (fuelType == null || station.prixCarburants.containsKey(fuelType)) &&
                        (!hasToilets || stationContainsService(rawData, station.id, "Toilettes publiques")) &&
                        (!hasAirPump || stationContainsService(rawData, station.id, "Station de gonflage")) &&
                        (!hasFoodShop || stationContainsService(rawData, station.id, "Boutique alimentaire"))
            }
        } else {
            emptyList()
        }
    }

    override fun parseData(data: String): List<Station> {
        if (data.isEmpty()) {
            logger.error("‚ùå Erreur : Donn√©es XML vides.")
            return emptyList()
        }

        logger.info("üì° Parsing des donn√©es XML...")

        val stationsList = mutableListOf<Station>()

        try {
            val document = DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(InputSource(StringReader(data)))
            val stationNodes = document.getElementsByTagName("pdv")

            for (i in 0 until stationNodes.length) {
                val stationElement = stationNodes.item(i) as org.w3c.dom.Element

                val id = stationElement.getAttribute("id") ?: continue
                val latitude = (stationElement.getAttribute("latitude").toDoubleOrNull()?.div(100000))?.toString() ?: "0.0"
                val longitude = (stationElement.getAttribute("longitude").toDoubleOrNull()?.div(100000))?.toString() ?: "0.0"
                val codePostal = stationElement.getAttribute("cp") ?: "00000"

                val villeNode = stationElement.getElementsByTagName("ville").item(0)
                val rawVille = villeNode?.textContent ?: "Non pr√©cis√©e"
                val ville = normalizeText(rawVille)

                val adresseNode = stationElement.getElementsByTagName("adresse").item(0)
                val rawAdresse = adresseNode?.textContent ?: "Non pr√©cis√©e"
                val adresse = normalizeText(rawAdresse)

                /*logger.info("üîç Ville brute : $rawVille | Ville normalis√©e : $ville")
                logger.info("üîç Adresse brute : $rawAdresse | Adresse normalis√©e : $adresse")*/

                val prixCarburants = mutableMapOf<String, String>()
                val prixNodes = stationElement.getElementsByTagName("prix")
                for (j in 0 until prixNodes.length) {
                    val prixElement = prixNodes.item(j) as org.w3c.dom.Element
                    val typeCarburant = prixElement.getAttribute("nom")
                    val prix = prixElement.getAttribute("valeur")
                    if (typeCarburant.isNotEmpty() && prix.isNotEmpty()) {
                        prixCarburants[typeCarburant] = prix
                    }
                }

                stationsList.add(Station(id, latitude, longitude, codePostal, ville, adresse, prixCarburants))
            }

        } catch (e: Exception) {
            logger.error("‚ùå Erreur lors du parsing XML: ${e.message}")
        }

        logger.info("‚úÖ ${stationsList.size} stations extraites avec succ√®s.")
        return stationsList
    }

    private fun stationContainsService(xmlData: String, stationId: String, serviceName: String): Boolean {
        val document = DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(InputSource(StringReader(xmlData)))
        val stationNodes = document.getElementsByTagName("pdv")

        for (i in 0 until stationNodes.length) {
            val stationElement = stationNodes.item(i) as org.w3c.dom.Element
            if (stationElement.getAttribute("id") == stationId) {
                val servicesNodes = stationElement.getElementsByTagName("service")
                for (j in 0 until servicesNodes.length) {
                    val serviceElement = servicesNodes.item(j)
                    if (serviceElement.textContent == serviceName) {
                        return true
                    }
                }
            }
        }
        return false
    }

    private fun downloadFile(url: String, destinationPath: String): Boolean {
        logger.info("üì° T√©l√©chargement du fichier ZIP...")

        val (_, _, result) = url.httpDownload().fileDestination { _, _ -> File(destinationPath) }.response()
        return when (result) {
            is Result.Success -> {
                logger.info("‚úÖ Fichier ZIP t√©l√©charg√© avec succ√®s.")
                true
            }
            is Result.Failure -> {
                logger.error("‚ùå Erreur lors du t√©l√©chargement du ZIP : ${result.error.message}")
                false
            }
        }
    }

    private fun extractZipFile(zipFilePath: String, outputFilePath: String): Boolean {
        return try {
            val zipFile = ZipFile(zipFilePath)
            val entry = zipFile.entries().asSequence().firstOrNull { it.name.endsWith(".xml") }
            if (entry != null) {
                zipFile.getInputStream(entry).use { input ->
                    File(outputFilePath).outputStream().use { output -> input.copyTo(output) }
                }
                logger.info("üìÇ Fichier XML extrait avec succ√®s.")
                true
            } else {
                logger.error("‚ùå Aucun fichier XML trouv√© dans le ZIP.")
                false
            }
        } catch (e: Exception) {
            logger.error("‚ùå Erreur lors de l'extraction du ZIP : ${e.message}")
            false
        }
    }
    
    private fun normalizeText(text: String): String {
        val normalized = Normalizer.normalize(text, Normalizer.Form.NFD)
            .replace("[\\p{InCombiningDiacriticalMarks}]".toRegex(), "") // Supprime les accents
            .replace("≈ì", "oe")
            .replace("√¶", "ae")
            .replace("√â", "E").replace("√©", "e")
            .replace("√à", "E").replace("√®", "e")
            .replace("√ä", "E").replace("√™", "e")
            .replace("√ã", "E").replace("√´", "e")
            .replace("√Ä", "A").replace("√†", "a")
            .replace("√ô", "U").replace("√π", "u")
            .replace("√é", "I").replace("√Æ", "i")
            .replace("√è", "I").replace("√Ø", "i")
            .replace("√î", "O").replace("√¥", "o")

        return normalized.uppercase()
    }

}
